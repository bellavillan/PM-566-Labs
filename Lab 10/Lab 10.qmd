---
title: "Lab 10: SQL"
author: Isabella Villanueva 
output: html
embed-resources: true
theme: flatly 
---

## Setup

```{r}
#Installing packages
library(RSQLite)
library(DBI)
library(DT)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
actor <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/actor.csv")
rental <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/rental.csv")
customer <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/customer.csv")
payment <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/payment_p2007_01.csv")

# Copy data.frames to database
dbWriteTable(con, "actor", actor)
dbWriteTable(con, "rental", rental)
dbWriteTable(con, "customer", customer)
dbWriteTable(con, "payment", payment)

dbListTables(con)
```
```{r}
dbGetQuery(con, "PRAGMA table_info(actor)")
dbGetQuery(con, "PRAGMA table_info(rental)")
dbGetQuery(con, "PRAGMA table_info(customer)")
dbGetQuery(con, "PRAGMA table_info(payment)")
```
## Exercise 1 

Edit the code below to retrieve the actor ID, first name and last name for all actors using the `actor` table. Sort by last name and then by first name (note that the code chunk below is set up to run SQL code rather than R code).
```{r}
actor_table_lastnameorder <- dbGetQuery(con, "
  SELECT actor_id, first_name, last_name
  FROM actor
  ORDER BY last_name, first_name;
")

datatable((actor_table_lastnameorder), class = 'cell-border stripe')
```
## Exercise 2

Retrieve the actor ID, first name, and last name for actors whose last name equals ‘WILLIAMS’ or ‘DAVIS’.
```{r}
actor_table_Williams_Davis <- dbGetQuery(con, "
SELECT actor_id, first_name, last_name
FROM actor
WHERE last_name IN ('WILLIAMS', 'DAVIS');
")

datatable((actor_table_Williams_Davis), class = 'cell-border stripe')
```

## Exercise 3

Write a query against the `rental` table that returns the IDs of the customers who rented a film on July 5, 2005 (use the rental.rental_date column, and you can use the `date()` function to ignore the time component). Include a single row for each distinct customer ID.

```{r}
rental_table_customer_date <- dbGetQuery(con, "
SELECT DISTINCT customer_id
FROM rental
WHERE date(rental_date) = '2005-07-05';
")

datatable((rental_table_customer_date), class = 'cell-border stripe')
```

## Exercise 4

### Exercise 4.1 
Construct a query that retrieves all rows from the `payment` table where the amount is either 1.99, 7.99, 9.99.
```{r}
payment_table_amount <- dbGetQuery(con, "
SELECT *
FROM payment
WHERE amount IN (1.99, 7.99, 9.99);
")

datatable((payment_table_amount), class = 'cell-border stripe')
```

### Exercise 4.2
Construct a query that retrieves all rows from the `payment` table where the amount is greater then 5.
```{r}
payment_table_amount_greaterthan5<- dbGetQuery(con, "
SELECT *
FROM payment
WHERE amount > 5
")

datatable((payment_table_amount_greaterthan5), class = 'cell-border stripe')
```

### Exercise 4.3 
Construct a query that retrieves all rows from the `payment` table where the amount is greater then 5 and less then 8.
```{r}
payment_table_amount_5to8 <- dbGetQuery(con, "
SELECT *
FROM payment
WHERE amount > 5 AND amount < 8;
")

datatable((payment_table_amount_5to8), class = 'cell-border stripe')
```
## Exercise 5 
Retrieve all the payment IDs and their amounts from the customers whose last name is ‘DAVIS’.
```{r}
payment_table_customerDavisamounts <- dbGetQuery(con, "
SELECT payment.payment_id, payment.amount
FROM payment
  INNER JOIN customer ON payment.customer_id = customer.customer_id
WHERE customer.last_name = 'DAVIS';
")

datatable((payment_table_customerDavisamounts), class = 'cell-border stripe')
```

## Exercise 6 

### Exercise 6.1 
Use `COUNT(*)` to count the number of rows in `rental`.

```{r}
rental_table_rowcount <- dbGetQuery(con, "
SELECT COUNT(*)
FROM rental;
")

datatable((rental_table_rowcount), class = 'cell-border stripe')
```


### Exercise 6.2 
Use `COUNT(*)` and `GROUP BY` to count the number of rentals for each `customer_id`.
```{r}
rental_table_rentalcount <- dbGetQuery(con, "
SELECT customer_id, COUNT(*)
FROM rental
GROUP BY customer_id;
")

datatable((rental_table_rentalcount), class = 'cell-border stripe')
```

### Exercise 6.3
Repeat the previous query and sort by the count in descending order.
```{r}
rental_table_rentalcount_descendingorder <- dbGetQuery(con, "
SELECT customer_id, COUNT(*) AS rental_count
FROM rental
GROUP BY customer_id
ORDER BY rental_count DESC;
")

datatable((rental_table_rentalcount_descendingorder), class = 'cell-border stripe')
```

### Exercise 6.4 
Repeat the previous query but use HAVING to only keep the groups with 40 or more.
```{r}
rental_table_rentalcount_descendingorder_morethan40 <- dbGetQuery(con, "
SELECT customer_id, COUNT(*) AS rental_count
FROM rental
GROUP BY customer_id
HAVING COUNT(*) >= 40
ORDER BY rental_count DESC;
")

datatable((rental_table_rentalcount_descendingorder_morethan40), class = 'cell-border stripe')
```

## Exercise 7 
Write a query that calculates a number of summary statistics for the `payment` table using `MAX`, `MIN`, `AVG` and `SUM`.
```{r}
payment_table_summary_statistics <- dbGetQuery(con, "
SELECT 
    MAX(amount) AS max_amount,
    MIN(amount) AS min_amount,
    AVG(amount) AS avg_amount,
    SUM(amount) AS total_amount
FROM payment;
")

datatable((payment_table_summary_statistics), class = 'cell-border stripe')
```

### Exercise 7.1 
Modify the above query to do those calculations for each `customer_id`.
```{r}
payment_table_summary_statistics_customer_id <- dbGetQuery(con, "
SELECT 
    customer_id,
    MAX(amount) AS max_amount,
    MIN(amount) AS min_amount,
    AVG(amount) AS avg_amount,
    SUM(amount) AS total_amount
FROM payment
GROUP BY customer_id;
")

datatable((payment_table_summary_statistics_customer_id), class = 'cell-border stripe')
```

### Exercise 7.2 
Modify the above query to only keep the `customer_id`s that have more then 5 payments.
```{r}
payment_table_summary_statistics_customer_id_morethan5 <- dbGetQuery(con, "
SELECT 
    customer_id,
    MAX(amount) AS max_amount,
    MIN(amount) AS min_amount,
    AVG(amount) AS avg_amount,
    SUM(amount) AS total_amount
FROM payment
GROUP BY customer_id
HAVING COUNT(*) > 5;;
")

datatable((payment_table_summary_statistics_customer_id_morethan5), class = 'cell-border stripe')
```

## Cleanup 
Run the following chunk to disconnect from the connection.
```{r}
# clean up
dbDisconnect(con)
```

