combined_data <- combined_data %>%
mutate(LA_site = ifelse(`Local Site Name` == "Los Angeles-North Main Street", `Local Site Name`, NA))
LA_site <- combined_data[!is.na(combined_data$LA_site), ]
combined_data[!is.na("LA_site")] |>
ggplot() +
geom_point(mapping = aes(x = Date, y = Daily_PM2.5, color= "LA_site"), color = "lightblue") +
facet_wrap(~ "LA_site", nrow = 1, scales = "free")+
labs(title = "Daily PM2.5 Concentration for Los Angeles-North Main Street Station, 2002 vs. 2022")+
labs(x = expression("Date"), y = "Daily PM2.5 Concentration (µg/m^3)")
library(dplyr)
combined_data <- combined_data %>%
mutate(LA_site = ifelse(`Local Site Name` == "Los Angeles-North Main Street", `Local Site Name`, NA))
LA_site <- combined_data[!is.na(combined_data$LA_site), ]
library(tidyverse)
combined_data[!is.na("LA_site")] |>
ggplot() +
geom_point(mapping = aes(x = Date, y = Daily_PM2.5, color= "LA_site"), color = "lightblue") +
facet_wrap(~ "LA_site", nrow = 1, scales = "free")+
labs(title = "Daily PM2.5 Concentration for Los Angeles-North Main Street Station, 2002 vs. 2022")+
labs(x = expression("Date"), y = "Daily PM2.5 Concentration (µg/m^3)")
library(dplyr)
combined_data <- combined_data %>%
mutate(LA_site = ifelse(`Local Site Name` == "Los Angeles-North Main Street", `Local Site Name`, NA))
LA_site <- combined_data[!is.na(combined_data$LA_site), ]
library(tidyverse)
combined_data[!is.na("LA_site")] |>
ggplot() +
geom_point(mapping = aes(x = Date, y = `Daily Mean PM2.5 Concentration`, color= "LA_site"), color = "lightblue") +
facet_wrap(~ "LA_site", nrow = 1, scales = "free")+
labs(title = "Daily PM2.5 Concentration for Los Angeles-North Main Street Station, 2002 vs. 2022")+
labs(x = expression("Date"), y = "Daily PM2.5 Concentration (µg/m^3)")
library(dplyr)
combined_data <- combined_data %>%
mutate(LA_site = ifelse(`Local Site Name` == "Los Angeles-North Main Street", `Local Site Name`, NA))
LA_site <- combined_data[!is.na(combined_data$LA_site), ]
library(tidyverse)
combined_data[!is.na("LA_site")] |>
ggplot() +
geom_point(mapping = aes(x = Year, y = `Daily Mean PM2.5 Concentration`, color= "LA_site"), color = "lightblue") +
facet_wrap(~ "LA_site", nrow = 1, scales = "free")+
labs(title = "Daily PM2.5 Concentration for Los Angeles-North Main Street Station, 2002 vs. 2022")+
labs(x = expression("Date"), y = "Daily PM2.5 Concentration (µg/m^3)")
library(tidyverse)
met <- met[!is.na(met$region),]
met <-
met[!is.na(met$elev_cat) & met$elev_cat != "clear"] |>
ggplot() +
geom_bar(mapping = aes(x = elev_cat, fill = region), position = "dodge")+
scale_fill_brewer(palette = "Pastel1")+
labs(title = "Weather Station Regions by Elevation Category")
library(tidyverse)
met <- met[!is.na(met$region),]
met <- met[!is.na(met$elev_cat,]
library(tidyverse)
met <- met[!is.na(met$region),]
met <- met[!is.na(met$elev_cat),]
ggplot(met, aes(x = met$elev_cat, fill = met$region))+
geom_bar(position = "dodge") + scale_fill_brewer(palette = "Pastel1") +
labs(title = "Weather Station Regions by Elevation Category",
x = "Elevation Category",
y = "Number of Stations",
fill = "region") +
theme_minimal()
met <- met[!is.na(met$region),]
met <- met[!is.na(met$dew.point),]
met <- met[!is.na(met$wind.sp),]
l <- met[!is.na(met$region),] |>
ggplot() +
stat_summary(mapping = aes(x = met$region, y = dew.point),
fun.min = min,
fun.max = max,
fun = median,
fun.data = mean_sdl)
l
install.packages("Hmisc")
### 7. Make a map showing the spatial trend in relative humidity in the US
met <- met[!is.na(met$region),]
met <- met[!is.na(met$dew.point),]
met <- met[!is.na(met$wind.sp),]
l <- met[!is.na(met$region),] |>
ggplot() +
stat_summary(mapping = aes(x = region, y = dew.point),
fun.min = min,
fun.max = max,
fun = median,
fun.data = mean_sdl)
l
labs(title = "Mean Dew Point by Region with Standard Deviation Error Bars",
x = "Region",
y = "Mean Dew Point (°C)") +
theme_minimal()
summarize(met,
wind.sp = median(wind.sp))
met <- met[!is.na(met$region),]
met <- met[!is.na(met$dew.point),]
met <- met[!is.na(met$wind.sp),]
l <- met[!is.na(met$region),] |>
ggplot() +
stat_summary(mapping = aes(x = region, y = dew.point),
fun.min = min,
fun.max = max,
fun = median,
fun.data = mean_sdl)
l
labs(title = "Mean Dew Point by Region with Standard Deviation Error Bars",
x = "Region",
y = "Mean Dew Point (°C)") +
theme_minimal()
summarize(met,
dew.point = median(dew.point))
met <- met[!is.na(met$region),]
met <- met[!is.na(met$dew.point),]
met <- met[!is.na(met$wind.sp),]
l <- met[!is.na(met$region),] |>
ggplot() +
stat_summary(mapping = aes(x = region, y = wind.sp),
fun.min = min,
fun.max = max,
fun = median,
fun.data = mean_sdl)
l
labs(title = "Mean Wind Speed by Region with Standard Deviation Error Bars",
x = "Region",
y = "Mean Wind Speed") +
theme_minimal()
summarize(met,
wind.sp = median(wind.sp))
met <- met[!is.na(met$region),]
met <- met[!is.na(met$dew.point),]
met <- met[!is.na(met$wind.sp),]
l <- met[!is.na(met$region),] |>
ggplot() +
stat_summary(mapping = aes(x = region, y = dew.point),
fun.min = min,
fun.max = max,
fun = median,
fun.data = mean_sdl)
l
labs(title = "Mean Dew Point by Region with Standard Deviation Error Bars",
x = "Region",
y = "Mean Dew Point (°C)") +
theme_minimal()
summarize(met,
dew.point = mean(dew.point))
met <- met[!is.na(met$region),]
met <- met[!is.na(met$dew.point),]
met <- met[!is.na(met$wind.sp),]
l <- met[!is.na(met$region),] |>
ggplot() +
stat_summary(mapping = aes(x = region, y = wind.sp),
fun.min = min,
fun.max = max,
fun = median,
fun.data = mean_sdl)
l
labs(title = "Mean Wind Speed by Region with Standard Deviation Error Bars",
x = "Region",
y = "Mean Wind Speed") +
theme_minimal()
summarize(met,
wind.sp = median(wind.sp))
met <- met[!is.na(met$rh),]
library(leaflet)
met_avg2 <- met[,.(rh = mean(rh, na.rm=TRUE), lat = mean(lat), lon = mean(lon)), by=c("USAFID")]
met <- met[!is.na(met$rh),]
library(leaflet)
met_avg2 <- met[,.(rh = mean(rh, na.rm=TRUE), lat = mean(lat), lon = mean(lon)), by=c("USAFID")]
setwd("~/Documents")
setwd("~/GitHub")
dir.create("PM-566-Labs")
setwd("PM-566-Labs")
download.file(
"https://raw.githubusercontent.com/USCbiostats/PM566/master/website/content/assignment/05-lab.Rmd",
destfile = "README.Rmd"
)
View(combined_data)
library(data.table)
library(dplyr)
met_url <- "https://github.com/USCbiostats/data-science-data/raw/master/02_met/met_all.gz"
tmp <- "met.gz"
dat <- fread(tmp)
met_url <- "https://github.com/USCbiostats/data-science-data/raw/master/02_met/met_all.gz"
tmp <- "met_all.gz"
dat <- fread(tmp)
head(dat)
dat <- as.data.frame(dat)
View(dat)
stations <- fread("https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv")
stations <- as.data.frame(stations)
stations$USAF <- as.integer(stations$USAF)
stations$USAF[stations$USAF == 999999] <- NA
stations$CTRY[stations$CTRY == ""] <- NA
stations$STATE[stations$STATE == ""] <- NA
stations <- fread("https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv")
stations <- as.data.frame(stations)
stations$USAF <- as.integer(stations$USAF)
stations <- fread("https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv")
stations <- as.data.frame(stations)
stations$USAF <- as.integer(stations$USAF)
stations
merge(
x     = dat,
y     = stations,
by.x  = "USAFID",
by.y  = "USAF",
all.x = TRUE,
all.y = FALSE
) |> nrow()
)
merge(
x     = dat,
y     = stations,
by.x  = "USAFID",
by.y  = "USAF",
all.x = TRUE,
all.y = FALSE
)
head(dat[, c('USAFID', 'WBAN', 'STATE')], n = 4)
merge(
x     = dat,
y     = stations,
by.x  = "USAFID",
by.y  = "USAF",
all.x = TRUE,
all.y = FALSE
)
head(dat[, c("USAFID", "WBAN", "STATE")], n = 4)
merge(
x     = dat,
y     = stations,
by.x  = "USAFID",
by.y  = "USAF",
all.x = TRUE,
all.y = FALSE
)
unique_stations <- length(unique(met$USAFID))
unique_stations
unique_states <- length(unique(dat$STATE.x))
unique_states
unique_states <- length(unique(met$STATE.x))
unique_states
unique_states <- length(unique(met$STATE.x))
unique_states
library(data.table)
library(dtplyr)
library (dplyr)
library(tidyverse)
stations <- fread("https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv")
stations[, USAF := as.integer(USAF)]
stations[, USAF := fifelse(USAF == 999999, NA_integer_, USAF)]
stations[, CTRY := fifelse(CTRY == "", NA_character_, CTRY)]
stations[, STATE := fifelse(STATE == "", NA_character_, STATE)]
stations <- stations[!is.na(USAF)]
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]
merge(
x     = met,
y     = stations,
by.x  = "USAFID",
by.y  = "USAF",
all.x = TRUE,
all.y = FALSE
) |> nrow()
stations <- stations[!duplicated(stations$USAF), ]
met <- merge(
x     = met,
y     = stations,
by.x  = "USAFID",
by.y  = "USAF",
all.x = TRUE,
all.y = FALSE
)
quantiles_temp <- quantile(met$temp, na.rm = TRUE)
quantiles_wind <- quantile(met$wind.sp, na.rm = TRUE)
quantiles_pressure <- quantile(met$atm.press, na.rm = TRUE)
quantiles_df <- data.frame(
metric = rep(c("Temperature", "Wind Speed", "Pressure"), each = length(quantiles_temp)),
quantile = rep(names(quantiles_temp), times = 3),
value = c(quantiles_temp, quantiles_wind, quantiles_pressure))
quantiles_df
any(duplicated(names(met)))
names(met) <- make.unique(names(met))
median_temp <- met %>% filter(temp == 24.0)
median(median_temp$USAFID)
median_wind <- met %>% filter(wind.sp == 2.1)
median(median_wind$USAFID)
median_pressure <- met %>% filter(atm.press == 1014.1)
median(median_pressure$USAFID)
state_median_temp <- met %>%
group_by(STATE.x) %>%
summarize(median_temp = median(temp, na.rm = TRUE), .groups = 'drop')
state_median_temp <- met %>%
group_by(STATE) %>%
summarize(median_temp = median(temp, na.rm = TRUE), .groups = 'drop')
state_median_temp
state_median_temp_usafid <- met %>%
inner_join(state_median_temp, by = "STATE.x") %>%
filter(temp == median_temp) %>%
group_by(STATE.x) %>%
summarize(median_usafid = median(USAFID, na.rm = TRUE), .groups = 'drop')
state_median_temp <- met %>%
group_by(STATE) %>%
summarize(median_temp = median(temp, na.rm = TRUE), .groups = 'drop')
state_median_temp
state_median_temp_usafid <- met %>%
inner_join(state_median_temp, by = "STATE") %>%
filter(temp == median_temp) %>%
group_by(STATE.x) %>%
summarize(median_usafid = median(USAFID, na.rm = TRUE), .groups = 'drop')
state_median_temp <- met %>%
group_by(STATE) %>%
summarize(median_temp = median(temp, na.rm = TRUE), .groups = 'drop')
state_median_temp
state_median_temp_usafid <- met %>%
inner_join(state_median_temp, by = "STATE") %>%
filter(temp == median_temp) %>%
group_by(STATE) %>%
summarize(median_usafid = median(USAFID, na.rm = TRUE), .groups = 'drop')
state_median_temp_usafid
state_median_wind <- met %>%
group_by(STATE) %>%
summarize(median_wind = median(wind.sp, na.rm = TRUE), .groups = 'drop')
state_median_wind
state_median_wind_usafid <- met %>%
inner_join(state_median_wind, by = "STATE") %>%
filter(wind.sp == median_wind) %>%
group_by(STATE) %>%
summarize(median_usafid = median(USAFID, na.rm = TRUE), .groups = 'drop')
state_median_wind_usafid
state_median_pressure <- met %>%
group_by(STATE) %>%
summarize(median_pressure = median(atm.press, na.rm = TRUE), .groups = 'drop')
state_median_pressure
state_median_pressure_usafid <- met %>%
inner_join(state_median_pressure, by = "STATE") %>%
filter(atm.press == median_pressure) %>%
group_by(STATE) %>%
summarize(median_usafid = floor(median(USAFID, na.rm = TRUE)), .groups = 'drop')
state_median_pressure_usafid
state_centroids <- median_temp %>%
group_by(STATE.x) %>%
summarise(
longitude = mean(LON.x, na.rm = TRUE),
latitude = mean(LAT.x, na.rm = TRUE)
)
state_centroids <- median_temp %>%
group_by(STATE) %>%
summarise(
longitude = mean(LON.x, na.rm = TRUE),
latitude = mean(LAT.x, na.rm = TRUE)
)
state_centroids <- median_temp %>%
group_by(STATE) %>%
summarise(
longitude = mean(LON, na.rm = TRUE),
latitude = mean(LAT, na.rm = TRUE)
)
state_centroids
library(sf)
state_centroids_sf <- st_as_sf(state_centroids, coords = c("longitude", "latitude"), crs = 4326)
stations_sf <- st_as_sf(state_centroids, coords = c("longitude", "latitude"), crs = 4326)
closest_stations <- state_centroids_sf %>%
rowwise() %>%
mutate(closest_index = {
distances <- st_distance(geometry, stations_sf)
which.min(distances)
}) %>%
mutate(closest_station = stations_sf[closest_index, ]) %>%
ungroup() %>%
select(STATE.x, closest_station)
stations_sf <- st_as_sf(state_centroids, coords = c("longitude", "latitude"), crs = 4326)
closest_stations <- state_centroids_sf %>%
rowwise() %>%
mutate(closest_index = {
distances <- st_distance(geometry, stations_sf)
which.min(distances)
}) %>%
mutate(closest_station = stations_sf[closest_index, ]) %>%
ungroup() %>%
select(STATE, closest_station)
closest_stations
longitude <- st_coordinates(closest_stations)[, 1]
latitude <- st_coordinates(closest_stations)[, 2]
closest_stations2 <- data.frame(stations_sf$STATE, latitude, longitude)
closest_stations2
library(leaflet)
closest_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron")
closest_map <- closest_map %>%
addCircleMarkers(data = closest_stations2,
lat = ~latitude,
lng = ~longitude,
color = "red",
radius = 10,
stroke = FALSE,
fillOpacity = 0.8,
label = ~"Closest Station")
closest_map <- closest_map %>%
addCircleMarkers(data = state_centroids,
lat = ~latitude,
lng = ~longitude,
color = "pink",
radius = 5,
stroke = FALSE,
fillOpacity = 0.8,
label = ~"Midpoint")
closest_map <- closest_map %>%
addLegend(position = "bottomright",
colors = c("red", "pink"),
labels = c("Closest Station", "Midpoint"),
title = "Legend")
closest_map
library(dplyr)
average_temp_by_state <- met %>%
group_by(STATE.x) %>%
summarize(Average_Temperature = mean(temp, na.rm = TRUE)) %>%
mutate(Classification = case_when(
Average_Temperature < 20 ~ "Low",
Average_Temperature >= 20 & Average_Temperature < 25 ~ "Mid",
Average_Temperature >= 25 ~ "High"
))
library(dplyr)
average_temp_by_state <- met %>%
group_by(STATE) %>%
summarize(Average_Temperature = mean(temp, na.rm = TRUE)) %>%
mutate(Classification = case_when(
Average_Temperature < 20 ~ "Low",
Average_Temperature >= 20 & Average_Temperature < 25 ~ "Mid",
Average_Temperature >= 25 ~ "High"
))
print(average_temp_by_state)
library(dplyr)
average_temp_by_state <- met %>%
group_by(STATE) %>%
summarize(Average_Temperature = mean(temp, na.rm = TRUE)) %>%
mutate(Classification = case_when(
Average_Temperature < 20 ~ "Low",
Average_Temperature >= 20 & Average_Temperature < 25 ~ "Mid",
Average_Temperature >= 25 ~ "High"
))
print(average_temp_by_state)
nrow(met)
nrow(met[is.na(met),])
unique_stations <- length(unique(met$USAFID))
unique_stations
unique_states <- length(unique(met$STATE.x))
unique_states
unique_states <- length(unique(met$STATE))
unique_states
unique_states <- length(unique(met$STATE))
unique_states
met_mean <- summarize(met,
mean_temp = mean(temp),
mean_wind.sp = mean(wind.sp),
mean_atm.press = mean(atm.press))
print(met_mean)
met_mean <- summarize(met,
mean_temp = mean(temp),
mean_wind.sp = mean(wind.sp),
mean_atm.press = mean(atm.press))
print(met_mean)
met_mean <- summarize(met,
mean_temp = mean(temp),
mean_wind.sp = mean(wind.sp),
mean_atm.press = mean(atm.press))
print(met_mean)
met_mean <- summarize(dat,
mean_temp = mean(temp),
mean_wind.sp = mean(wind.sp),
mean_atm.press = mean(atm.press))
print(met_mean)
met_mean <- summarize(met,
mean_temp = mean(temp),
mean_wind.sp = mean(wind.sp),
mean_atm.press = mean(atm.press))
print(met_mean)
met_mean <- summarize(met,
mean_temp = mean(temp),
mean_wind.sp = mean(wind.sp),
mean_atm.press = mean(atm.press))
print(met_mean)
met <- met %>%
mutate(temp_level = cut(temp,
breaks = quantile(temp, probs = seq(0, 1, 0.25), na.rm = TRUE),
include.lowest = TRUE,
labels = c("Low", "Medium", "High", "Very High")))
summary_table <- met %>%
filter(temp_level != "Very High") %>%
group_by(temp_level) %>%
summarise(
number_of_states = n_distinct(STATE),
mean_temp = mean(temp, na.rm = TRUE),
mean_wind = mean(wind.sp, na.rm = TRUE),
mean_pressure = mean(atm.press, na.rm = TRUE))
summary_table
merge(
x = met,
y = stations,
by.x = "USAFID",
by.y = "USAF",
all.x = TRUE,
all.y = FALSE
) |> nrow()
stations <- stations[!duplicated(stations$USAF), ]
met <- merge(
x = met,
y = stations,
by.x = "USAFID",
by.y = "USAF",
all.x = TRUE,
all.y = FALSE
)
