---
title: "Lab 11: Interactive Visualization"
author: Isabella Villanueva 
output: html
embed-resources: true
theme: flatly 
---

```{r setup, message=FALSE, echo=FALSE, warning=FALSE}
library(data.table)
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(plotly)
library(knitr)
library(widgetframe)
```

# Learning Goals

-   Read in and process the COVID dataset from the New York Times GitHub repository
-   Create interactive graphs of different types using `plot_ly()` and `ggplotly()` functions
-   Customize the hoverinfo and other plot features
-   Create a Choropleth map using `plot_geo()`

# Lab Description

We will work with COVID data downloaded from the New York Times. The dataset consists of COVID-19 cases and deaths in each US state during the course of the COVID epidemic.

**The objective of this lab is to explore relationships between cases, deaths, and population sizes of US states, and plot data to demonstrate this**

## I. Reading and processing the New York Times (NYT) state-level COVID-19 data

### 1. Read in the data

-   Read in the COVID data with data.table:fread() from the NYT GitHub repository: "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"

-   Read in the state population data with data.table:fread() from the repository: "https://raw.githubusercontent.com/COVID19Tracking/associated-data/master/us_census_data/us_census_2018_population_estimates_states.csv"

-   Merge datasets

#### Reading the data

```{r}
## data extracted from New York Times state-level data from NYT Github repository
# https://github.com/nytimes/covid-19-data

cv_states <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv", show_col_types = FALSE)

## state-level population information from us_census_data available on GitHub repository:
# https://github.com/COVID19Tracking/associated-data/tree/master/us_census_data

state_pops <- read_csv("https://raw.githubusercontent.com/COVID19Tracking/associated-data/master/us_census_data/us_census_2018_population_estimates_states.csv", show_col_types = FALSE)
```

#### Loading and Merging the data

```{r, echo=TRUE, message=FALSE}
# load COVID state-level data from NYT
cv_states <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"))

# load state population data
state_pops <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/COVID19Tracking/associated-data/master/us_census_data/us_census_2018_population_estimates_states.csv"))
state_pops$abb <- state_pops$state
state_pops$state <- state_pops$state_name
state_pops$state_name <- NULL

# merging the data
cv_states <- merge(cv_states, state_pops, by="state")
```

### 2. Look at the data

-   Inspect the dimensions, `head`, and `tail` of the data
-   Inspect the structure of each variables. Are they in the correct format?

```{r}
dim(cv_states)
head(cv_states)
tail(cv_states)
str(cv_states)
unique(cv_states$state)
```

After checking the dimensions, structure, head and tail of the merged dataset, all of the variables are in the correct format (integers and numbers are identified correctly, data is in the correct format, character variables like state name and abbreviations are correct and matched as well).

I also inspected the `state` variable because 52 counts under the variable `state`. After using the `unique()` function, this is because District of Columbia and Puerto Rico were also included in the dataset. When looking at the variable `geo_id`, it is not sequential in its numbering as there is a numerical gap in between California (CA) and Colorado (CO) (alphabetically adjacent), yet CA is numbered 6 and CO is numbered 8. This accounts for the `geo_id` counting up to 56.

### 3. Format the data

-   Make date into a date variable
-   Make state into a factor variable
-   Order the data first by state, second by date
-   Confirm the variables are now correctly formatted
-   Inspect the range values for each variable. What is the date range? The range of cases and deaths?

```{r}
# format the date
cv_states$date <- as.Date(cv_states$date, format="%Y-%m-%d")

# format the state and state abbreviation (abb) variables
state_list <- unique(cv_states$state)
cv_states$state <- factor(cv_states$state, levels = state_list)
abb_list <- unique(cv_states$abb)
cv_states$abb <- factor(cv_states$abb, levels = abb_list)

# order the data first by state, second by date
cv_states = cv_states[order(cv_states$state, cv_states$date),]

# Confirm the variables are now correctly formatted
str(cv_states)
head(cv_states)
tail(cv_states)

# Inspect the range values for each variable. The range of cases and deaths?
summary(cv_states)

#Checking the date range
min(cv_states$date)
max(cv_states$date)
#Checking the range of cases
min(cv_states$cases)
max(cv_states$cases)
#Checking the range of deaths
min(cv_states$deaths)
max(cv_states$deaths)
```

After checking that the variables are correctly formated (they are), the data's dates range from 2020-01-21 (January 2020) to 2023-03-23 (March 2023).

The data's range of cases range from 1 to 12,169,158.

The data's range of deaths range from 0 to 104,277.

### 4. Add `new_cases` and `new_deaths` and correct outliers

-   Add variables for new cases, `new_cases`, and new deaths, `new_deaths`:

    -   Hint: You can set `new_cases` equal to the difference between cases on date i and date i-1, starting on date i=2

-   Use `plotly` for EDA: See if there are outliers or values that don't make sense for `new_cases` and `new_deaths`. Which states and which dates have strange values?

-   Correct outliers: Set negative values for `new_cases` or `new_deaths` to 0

-   Recalculate `cases` and `deaths` as cumulative sum of updated `new_cases` and `new_deaths`

-   Get the rolling average of new cases

```{r, message=FALSE, warning=FALSE}
# Add variables for new_cases and new_deaths:
for (i in 1:length(state_list)) {
  cv_subset = subset(cv_states, state == state_list[i])
  cv_subset = cv_subset[order(cv_subset$date),]

  # add starting level for new cases and deaths
  cv_subset$new_cases = cv_subset$cases[1]
  cv_subset$new_deaths = cv_subset$deaths[1]

  for (j in 2:nrow(cv_subset)) {
    cv_subset$new_cases[j] = cv_subset$cases[j] - cv_subset$cases[j-1]
    cv_subset$new_deaths[j] = cv_subset$deaths[j] - cv_subset$deaths[j-1]
  }

  # include in main dataset
  cv_states$new_cases[cv_states$state==state_list[i]] = cv_subset$new_cases
  cv_states$new_deaths[cv_states$state==state_list[i]] = cv_subset$new_deaths
}

# Focus on recent dates
cv_states <- cv_states %>% dplyr::filter(date >= "2021-06-01")

# Inspect outliers using plotly
p1<-ggplot(cv_states, aes(x = date, y = new_cases, color = state)) + geom_line() + geom_point(size = .5, alpha = 0.5)
ggplotly(p1)
p1<-NULL # to clear from workspace

p2<-ggplot(cv_states, aes(x = date, y = new_deaths, color = state)) + geom_line() + geom_point(size = .5, alpha = 0.5)
ggplotly(p2)
p2<-NULL # to clear from workspace

# set negative new case or death counts to 0
cv_states$new_cases[cv_states$new_cases<0] = 0
cv_states$new_deaths[cv_states$new_deaths<0] = 0

# Recalculate `cases` and `deaths` as cumulative sum of updated `new_cases` and `new_deaths`
for (i in 1:length(state_list)) {
  cv_subset = subset(cv_states, state == state_list[i])

  # add starting level for new cases and deaths
  cv_subset$cases = cv_subset$cases[1]
  cv_subset$deaths = cv_subset$deaths[1]

  for (j in 2:nrow(cv_subset)) {
    cv_subset$cases[j] = cv_subset$new_cases[j] + cv_subset$cases[j-1]
    cv_subset$deaths[j] = cv_subset$new_deaths[j] + cv_subset$deaths[j-1]
  }
  # include in main dataset
  cv_states$cases[cv_states$state==state_list[i]] = cv_subset$cases
  cv_states$deaths[cv_states$state==state_list[i]] = cv_subset$deaths
}

# Smooth new counts
cv_states$new_cases = zoo::rollmean(cv_states$new_cases, k=7, fill=NA, align='right') %>% round(digits = 0)
cv_states$new_deaths = zoo::rollmean(cv_states$new_deaths, k=7, fill=NA, align='right') %>% round(digits = 0)

# Inspect data again
p2<-ggplot(cv_states, aes(x = date, y = new_deaths, color = state)) + geom_line() + geom_point(size = .5, alpha = 0.5)
ggplotly(p2)
#p2=NULL
```

**Which states and which dates have strange values? (before recalculating)**

##### New cases

-   **Florida, 2021-06-04 with -40527 new cases**
-   Colorado, 2022-01-29 with -4678 new cases
-   Pennsylvania, 2022-02-08 with -4397 new cases
-   Texas, 2022-10-08 with -11187 new cases
-   Kentucky, 2022-10-11 with -8829 new cases
-   Tennessee, 2023-01-01 with -18255 new cases

##### New deaths

-   California, 2021-06-04 with -375 cases
-   California, 2021-08-11 with -357 cases
-   **Massachusetts, 2022-03-14 with -3370 new deaths**

After recalculating `cases` and `deaths` as cumulative sum of updated `new_cases` and `new_deaths`, the strange values that were negative are no longer apparent on the new graph plots, making the peaks of new cases and new deaths more visible and helping those analyzing the data to focus on the intended data.

### 5. Add additional variables

-   Add population-normalized (by 100,000) variables for each variable type (rounded to 1 decimal place). Make sure the variables you calculate are in the correct format (`numeric`). You can use the following variable names:

    -   `per100k` = cases per 100,000 population
    -   `newper100k`= new cases per 100,000
    -   `deathsper100k` = deaths per 100,000
    -   `newdeathsper100k` = new deaths per 100,000

-   Add a "naive CFR" variable representing `deaths / cases` on each date for each state

-   Create a dataframe representing values on the most recent date, `cv_states_today`, as done in lecture

```{r, message=FALSE, warning=FALSE}
# add population normalized (by 100,000) counts for each variable
cv_states$per100k =  as.numeric(format(round(cv_states$cases/(cv_states$population/100000),1),nsmall=1))
cv_states$newper100k =  as.numeric(format(round(cv_states$new_cases/(cv_states$population/100000),1),nsmall=1))
cv_states$deathsper100k =  as.numeric(format(round(cv_states$deaths/(cv_states$population/100000),1),nsmall=1))
cv_states$newdeathsper100k =  as.numeric(format(round(cv_states$new_deaths/(cv_states$population/100000),1),nsmall=1))

# add a naive_CFR variable = deaths / cases
cv_states = cv_states %>% mutate(naive_CFR = round((deaths*100/cases),2))

# create a `cv_states_today` variable
cv_states_today = subset(cv_states, date==max(cv_states$date))
```

## II. Scatterplots

### 6. Explore scatterplots using `plot_ly()`

-   Create a scatterplot using `plot_ly()` representing `pop_density` vs. various variables (e.g. `cases`, `per100k`, `deaths`, `deathsper100k`) for each state on most recent date (`cv_states_today`)
    -   Size the points by state population
    -   Use hover to identify any outliers.
    -   Remove those outliers and replot.
-   Choose one plot. For this plot:
    -   Add `hoverinfo` specifying the state name, cases per 100k, and deaths per 100k, similarly to how we did this in the lecture notes
    -   Add layout information to title the chart and the axes
    -   Enable `hovermode = "compare"`

```{r, message=FALSE, warning=FALSE}
# pop_density vs. cases
cv_states_today %>% 
  plot_ly(x = ~pop_density, y = ~cases, 
          type = 'scatter', mode = 'markers', color = ~state,
          size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5))

# filter out "District of Columbia"
cv_states_today_scatter <- cv_states_today %>% filter(state!="District of Columbia")

# pop_density vs. cases after filtering
cv_states_today_scatter %>% 
  plot_ly(x = ~pop_density, y = ~cases, 
          type = 'scatter', mode = 'markers', color = ~state,
          size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5))

# pop_density vs. deathsper100k
cv_states_today_scatter %>% 
  plot_ly(x = ~pop_density, y = ~deathsper100k, 
          type = 'scatter', mode = 'markers', color = ~state,
          size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5))

# Adding hoverinfo
cv_states_today_scatter %>% 
  plot_ly(x = ~pop_density, y = ~deathsper100k,
          type = 'scatter', mode = 'markers', color = ~state,
          size = ~population, sizes = c(5, 70), marker = list(sizemode='diameter', opacity=0.5),
          hoverinfo = 'text',
          text = ~paste( paste(state, ":", sep=""), paste(" Cases per 100k: ", per100k, sep="") , 
                         paste(" Deaths per 100k: ",
                        deathsper100k, sep=""), sep = "<br>")) %>%
  layout(title = "Population-normalized COVID-19 deaths (per 100k) vs. population density for US states",
                  yaxis = list(title = "Deaths per 100k"), xaxis = list(title = "Population Density"),
         hovermode = "compare")
```

### 7. Explore scatterplot trend interactively using `ggplotly()` and `geom_smooth()`

-   For `pop_density` vs. `newdeathsper100k` create a chart with the same variables using `gglot_ly()`
-   Explore the pattern between $x$ and $y$ using `geom_smooth()`
    -   Explain what you see. Do you think `pop_density` is a correlate of `newdeathsper100k`?

It’s possible that population density could correlate with `newdeathsper100k`, but the non-linear pattern implies other factors may be at play. In this scatter plot, we see the relationship between population density (`pop_density` on the x-axis) and new deaths per 100,000 people (`newdeathsper100k` on the y-axis). The data points are represented by black circles, with larger circles potentially indicating higher frequencies or weights of observations. A blue line represents a smoothed trend, with a shaded area indicating confidence intervals around this trend.

#### Observations

-   **Initial Decrease:** Atlow population densities, there appears to be a slight decrease in newdeathsper100k, showing a downward trend until around a pop_density just before 250.
-   **Increase and Plateau:** Around a pop_density of 250-500, there is an increase in newdeathsper100k, followed by a somewhat stable region where the death rate doesn't change drastically with increasing density.
-   **Decreasing Arch:** Beyond a pop_density of around 750, there is a noticeable downward trend in newdeathsper100k, with both the blue trend line and individual points indicating fewer deaths per 100,000 people as density increases.

#### Interpretation

This pattern suggests that population density has a non-linear association with newdeathsper100k. While there may be some correlation, it is complex and may be influenced by other variables.

```{r, message=FALSE, warning=FALSE}
p <- ggplot(cv_states_today_scatter, aes(x=pop_density, y=newdeathsper100k, size=population)) + geom_point() + geom_smooth()
ggplotly(p)
```

### 8. Multiple line chart

-   Create a line chart of the `naive_CFR` for all states over time using `plot_ly()`
    -   Use the zoom and pan tools to inspect the `naive_CFR` for the states that had an increase in September. How have they changed over time? Over time, the general trend of this line chart shows a general decrease over the span of about 2 years, with a drastic drop around January 2022. Then a plateau can be seen afterward.
-   Create one more line chart, for Florida only, which shows `new_cases` and `new_deaths` together in one plot. Hint: use `add_layer()` (this function did not work, add_trace did)
    -   Use hoverinfo to "eyeball" the approximate peak of deaths and peak of cases. What is the time delay between the peak of cases and the peak of deaths?

The peak date of deaths was September 20, 2021 with 445 deaths where as the peak date of cases was January 10, 2022 with 84.669K cases. The time delay is about 112 days between these two peaks.

```{r}

# Line chart for naive_CFR for all states over time using `plot_ly()`
plot_ly(cv_states, x = ~date, y = ~naive_CFR, color = ~state, type = "scatter", mode = "lines")

# Line chart for Florida showing new_cases and new_deaths together
cv_states %>% 
  filter(state == "Florida") %>% 
  plot_ly(x = ~date, y = ~new_cases, type = "scatter", mode = "lines", name = "New Cases") %>%
  add_trace(y = ~new_deaths, type = "scatter", mode = "lines", name = "New Deaths")

```

### 9. Heatmaps

Create a heatmap to visualize `new_cases` for each state on each date greater than June 1st, 2021 - Start by mapping selected features in the dataframe into a matrix using the **tidyr** package function `pivot_wider()`, naming the rows and columns, as done in the lecture notes

-   Use `plot_ly()` to create a heatmap out of this matrix. Which states stand out?

In this initial heatmap, California, Florida, New York, and Texas are the only states that stand out.

-   Repeat with `newper100k` variable. Now which states stand out?

With the `newper100k` variable, there is a general standard hue amongst all states except Rhode Island, which stands out with its vivid color.

-   Create a second heatmap in which the pattern of `new_cases` for each state over time becomes more clear by filtering to only look at dates every two weeks

With this step, it is apparent which states and which time frames are peaks of new cases with the bright yellow color highlighting these time periods and locations. For example, Aug 2021 in Louisiana and Mississippi, Sept 2021 in South Carolina and Tennessee, and Oct 2021 in Alaska are states with prominent values.

```{r}

# Map state, date, and new_cases to a matrix
library(tidyr)
cv_states_mat <- cv_states %>% select(state, date, new_cases) %>% dplyr::filter(date>as.Date("2021-06-15"))
cv_states_mat2 <- as.data.frame(pivot_wider(cv_states_mat, names_from = state, values_from = new_cases))
rownames(cv_states_mat2) <- cv_states_mat2$date
cv_states_mat2$date <- NULL
cv_states_mat2 <- as.matrix(cv_states_mat2)

# Create a heatmap using plot_ly()
plot_ly(x=colnames(cv_states_mat2), y=rownames(cv_states_mat2),
             z=~cv_states_mat2,
             type="heatmap",
             showscale=T)

# Repeat with newper100k
cv_states_mat <- cv_states %>% select(state, date, newper100k) %>% dplyr::filter(date>as.Date("2021-06-15"))
cv_states_mat2 <- as.data.frame(pivot_wider(cv_states_mat, names_from = state, values_from = newper100k))
rownames(cv_states_mat2) <- cv_states_mat2$date
cv_states_mat2$date <- NULL
cv_states_mat2 <- as.matrix(cv_states_mat2)

plot_ly(x=colnames(cv_states_mat2), y=rownames(cv_states_mat2),
             z=~cv_states_mat2,
             type="heatmap",
             showscale=T)

# Create a second heatmap after filtering to only include dates every other week
filter_dates <- seq(as.Date("2021-06-15"), as.Date("2021-11-01"), by="2 weeks")

cv_states_mat <- cv_states %>% select(state, date, newper100k) %>% filter(date %in% filter_dates)
cv_states_mat2 <- as.data.frame(pivot_wider(cv_states_mat, names_from = state, values_from = newper100k))
rownames(cv_states_mat2) <- cv_states_mat2$date
cv_states_mat2$date <- NULL
cv_states_mat2 <- as.matrix(cv_states_mat2)

# Create a heatmap using plot_ly()
plot_ly(x=colnames(cv_states_mat2), y=rownames(cv_states_mat2),
             z=~cv_states_mat2,
             type="heatmap",
             showscale=T)
```

### 10. Map

-   Create a map to visualize the `naive_CFR` by state on October 15, 2021
-   Compare with a map visualizing the `naive_CFR` by state on most recent date
-   Plot the two maps together using `subplot()`. Make sure the shading is for the same range of values (google is your friend for this)
-   Describe the difference in the pattern of the CFR.

In the plotting of the two maps, one by state on October 15, 2021 and the other by state on November 12, 2024, there is a drastic difference between these two maps. We can notice that the recent map has little to no hue, indicated a lack in new cases in comparison to the 2021 map. We can also notice that the northern states of Alaska, Montana, Idaho, and Wyoming have the darkest hues in their map. In comparing the two maps for their pattern of CFR, the most recent map has no pattern while there is a noticeable pattern in the 2021 map. 

```{r}
### For specified date
pick.date = "2021-10-15"

# Extract the data for each state by its abbreviation
cv_per100 <- cv_states %>% filter(date==pick.date) %>% select(state, abb, newper100k, cases, deaths) # select data
cv_per100$state_name <- cv_per100$state
cv_per100$state <- cv_per100$abb
cv_per100$abb <- NULL

# Create hover text
cv_per100$hover <- with(cv_per100, paste(state_name, '<br>', "Cases per 100k: ", newper100k, '<br>', "Cases: ", cases, '<br>', "Deaths: ", deaths))

# Set up mapping details
set_map_details <- list(
  scope = 'usa',
  projection = list(type = 'albers usa'),
  showlakes = TRUE,
  lakecolor = toRGB('white')
)

# Make sure both maps are on the same color scale
shadeLimit <- 125

# Create the map
fig <- plot_geo(cv_per100, locationmode = 'USA-states') %>% 
  add_trace(
    z = ~newper100k, text = ~hover, locations = ~state,
    color = ~newper100k, colors = 'Purples'
  )
fig <- fig %>% colorbar(title = paste0("Cases per 100k: ", pick.date), limits = c(0,shadeLimit))
fig <- fig %>% layout(
    title = paste('Cases per 100k by State as of ', pick.date, '<br>(Hover for value)'),
    geo = set_map_details
  )
fig_pick.date <- fig

#############
### Map for today's date

# Extract the data for each state by its abbreviation
cv_per100 <- cv_states_today %>%  select(state, abb, newper100k, cases, deaths) # select data
cv_per100$state_name <- cv_per100$state
cv_per100$state <- cv_per100$abb
cv_per100$abb <- NULL

# Create hover text
cv_per100$hover <- with(cv_per100, paste(state_name, '<br>', "Cases per 100k: ", newper100k, '<br>', "Cases: ", cases, '<br>', "Deaths: ", deaths))

# Set up mapping details
set_map_details <- list(
  scope = 'usa',
  projection = list(type = 'albers usa'),
  showlakes = TRUE,
  lakecolor = toRGB('white')
)

# Create the map
fig <- plot_geo(cv_per100, locationmode = 'USA-states') %>% 
  add_trace(
    z = ~newper100k, text = ~hover, locations = ~state,
    color = ~newper100k, colors = 'Purples'
  )
fig <- fig %>% colorbar(title = paste0("Cases per 100k: ", Sys.Date()), limits = c(0,shadeLimit))
fig <- fig %>% layout(
    title = paste('Cases per 100k by State as of', Sys.Date(), '<br>(Hover for value)'),
    geo = set_map_details
  )
fig_Today <- fig


### Plot together 
subplot(fig_pick.date, fig_Today, nrows = 2, margin = .05)
```

